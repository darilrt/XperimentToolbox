uniform mat4 XTB_MATRIX_VP; // View * Projection Matrix
uniform mat4 XTB_MATRIX_M;  // Model View Matrix
uniform vec3 XTB_CAMERA_POS;

#define UNIFORM(T, A) \
	uniform T A; \
	uniform bool xtb_##A##_isSet = false;

#define ISSET(A) xtb_##A##_isSet

UNIFORM(sampler2D, albedo);
UNIFORM(sampler2D, normalMap);

varying vec2 uvMainTex;
varying vec4 vertexPosition;
varying vec3 worldNormal;

#ifdef ETB_VERTEX_SHADER

layout (location = 0) in vec3 _vertexPosition;
layout (location = 1) in vec2 _uvMainTex;
layout (location = 2) in vec3 _vertexNormal;

void main() {
	uvMainTex = _uvMainTex;
	worldNormal = (XTB_MATRIX_M * vec4(normalize(_vertexNormal), 1.0)).xyz;
	vertexPosition = XTB_MATRIX_M * vec4(_vertexPosition, 1);
	
	gl_Position = XTB_MATRIX_VP * vertexPosition;
}

#endif
#ifdef ETB_FRAGMENT_SHADER

layout (location = 0) out vec4 _fragColor;

vec3 lightPos = vec3(-100, 100, 0);
vec3 lightColor = vec3(1, 1, 1);

// calculate tangent normal from texture and worldNormal
vec3 CalcNormal() {
	vec3 normal = texture(normalMap, uvMainTex).xyz;
	normal = normalize(normal * 2.0 - 1.0);
	
	vec3 tangent = normalize(dFdx(vertexPosition.xyz));
	vec3 bitangent = normalize(dFdy(vertexPosition.xyz));
	
	mat3 TBN = mat3(tangent, bitangent, worldNormal);
	return normalize(TBN * normal);
}

// calculate normal from map
vec3 CalcNormalMap() {
	vec3 normal = texture(normalMap, uvMainTex).xyz;
	normal = normalize(normal * 2.0 - 1.0);
	return normal;
}

void main() {
	vec3 objectColor = vec3(1.0, 1.0, 1.0);
	
	if (ISSET(albedo)) {
		objectColor = texture(albedo, uvMainTex).rgb;
	}
	
	vec3 N = normalize(worldNormal);
	
	if (ISSET(normalMap)) {
		N = CalcNormal();
	}
	
	vec3 V = normalize(-vertexPosition.xyz);
	vec3 L = normalize(lightPos - vertexPosition.xyz);
	vec3 H = normalize(V + L);
	float NdotL = max(dot(N, L), 0.0);
	float NdotH = max(dot(N, H), 0.0);
	float VdotH = max(dot(V, H), 0.0);
	
	vec3 viewDir = normalize(XTB_CAMERA_POS - vertexPosition.xyz);
	float NdotV = max(dot(N, viewDir), 0.0);
	
	vec3 F0 = vec3(0.04);
	vec3 F = F0 + (1.0 - F0) * pow(1.0 - VdotH, 5.0);
	
	float roughness = 1.0;
	float metallic = 1.0;
	
	float a = roughness * roughness;
	float a2 = a * a;
	float NDF = (a2 - 1.0) / (3.14159265359 * log(a2) * (NdotH * NdotH - 1.0) + 1.0);
	float G = min(1.0, min((2.0 * NdotH * VdotH / VdotH), (2.0 * NdotH * VdotH / VdotH)));
	vec3 kS = F;
	vec3 kD = 1.0 - kS;
	kD *= 1.0 - metallic;
		
	vec3 numerator = NDF * G * F;
	float denominator = 4.0 * NdotL * NdotV + 0.001;
	vec3 specular = numerator / denominator;
	
	vec3 kA = vec3(0.2);
	vec3 ambient = kA * objectColor / 3.14159265359;
	
	vec3 irradiance = lightColor * NdotL;
	vec3 diffuse = irradiance * objectColor;
	
	vec3 radiance = lightColor * (specular + diffuse + ambient);
	
	_fragColor = vec4(radiance, 1.0);
}

#endif