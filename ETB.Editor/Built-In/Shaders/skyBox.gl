uniform mat4 ETB_MATRIX_VP; // View * Projection Matrix
uniform mat4 ETB_MATRIX_M;  // Model View Matrix

varying vec2 uvMainTex;
varying vec4 vertexPosition;
varying vec3 worldNormal;

#ifdef ETB_VERTEX_SHADER

layout (location = 0) in vec3 _vertexPosition;
layout (location = 1) in vec2 _uvMainTex;
layout (location = 2) in vec3 _vertexNormal;

void main() {
	uvMainTex = _uvMainTex;
	worldNormal = (ETB_MATRIX_M * vec4(normalize(_vertexNormal), 1.0)).xyz;
	vertexPosition = ETB_MATRIX_M * vec4(_vertexPosition, 1);
	
	gl_Position = ETB_MATRIX_VP * vertexPosition;
}

#endif
#ifdef ETB_FRAGMENT_SHADER

layout (location = 0) out vec4 _fragColor;

void main() {
    vec3 h = vec3(1.0, 1.0, 1.0);
    vec3 s = vec3(0.06, 0.71, 1.0);
    
    float c = vertexPosition.y / 50.0;
    
    vec3 skyColor = mix(h, s, c);
    
    vec3 color = skyColor;
    
	_fragColor = vec4(
        color,
        1.0
    );
}

#endif